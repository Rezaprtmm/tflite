# -*- coding: utf-8 -*-
"""fix-submission-tflite

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15PDVI1czjjLc47v2Rpg4KupRBTuMV9uX
"""

!pip install -q kaggle

from google.colab import files
files.upload()

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!ls ~/.kaggle

!kaggle datasets download -d misrakahmed/vegetable-image-dataset

!mkdir vgtbles
!unzip -qq vegetable-image-dataset.zip -d vgtbles
!ls vgtbles

!ls vgtbles/Vegetable\ Images/train/

import os

vgtbles = os.path.join('/content/vgtbles/Vegetable Images/train/')

print(os.listdir(vgtbles))

import shutil

ignore_vgtbles = ['Radish', 'Cabbage', 'Pumpkin', 'Broccoli', 'Brinjal', 'Bitter_Gourd', 'Bean', 'Cauliflower', 'Carrot', 'Potato', 'Cucumber']

for x in ignore_vgtbles:
  path = os.path.join(vgtbles, x)
  shutil.rmtree(path)

list_vgtbles = os.listdir(vgtbles)
print(list_vgtbles)

from PIL import Image
total = 0

for x in list_vgtbles:
  dir = os.path.join(vgtbles, x)
  y = len(os.listdir(dir))
  print(x+':', y)
  total = total + y
  
  img_name = os.listdir(dir)
  for z in range(4):
    img_path = os.path.join(dir, img_name[z])
    img = Image.open(img_path)
    print('-',img.size)
  print('---------------')

print('\nTotal :', total)

import numpy as np
import matplotlib.pyplot as plt

fig, ax = plt.subplots(2, 2, figsize=(15,15))
fig.suptitle("Randomly displays images.", fontsize=24)
vgtbles_sorted = sorted(list_vgtbles)
vgtbles_id = 0
for i in range(2):
  for j in range(2):
    try:
      vgtbles_selected = vgtbles_sorted[vgtbles_id] 
      vgtbles_id += 1
    except:
      break
    if vgtbles_selected == '.TEMP':
        continue
    vgtbles_selected_images = os.listdir(os.path.join(vgtbles, vgtbles_selected))
    vgtbles_selected_random = np.random.choice(vgtbles_selected_images)
    img = plt.imread(os.path.join(vgtbles, vgtbles_selected, vgtbles_selected_random))
    ax[i][j].imshow(img)
    ax[i][j].set_title(vgtbles_selected, pad=10, fontsize=22)
    
plt.setp(ax, xticks=[],yticks=[])
plt.show

from tensorflow.keras.preprocessing.image import ImageDataGenerator
 
train_datagen = ImageDataGenerator(
    rotation_range=40,
    width_shift_range=0.2,
    height_shift_range=0.2,
    rescale=1/255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest',
    validation_split=0.2   
)

batch_size = 256

data_train = train_datagen.flow_from_directory(
    vgtbles,
    target_size=(150, 150),
    batch_size=batch_size,
    class_mode='categorical',
    subset='training')

data_val = train_datagen.flow_from_directory(
    vgtbles, 
    target_size=(150, 150),
    batch_size=batch_size,
    class_mode='categorical',
    subset='validation')

import tensorflow as tf

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(64, (3,3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dropout(0.5), 
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(4, activation='softmax')
])

model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics = ['accuracy'])

model.summary()

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.82 and logs.get('val_accuracy')>0.82):
      print("\nAccuracy above 82%, finish training!")
      self.model.stop_training = True

callbacks = myCallback()

with tf.device("/device:GPU:0"):
  history = model.fit(data_train, 
                    epochs = 20, 
                    steps_per_epoch = data_train.samples // batch_size,
                    validation_data = data_val, 
                    validation_steps = data_val.samples // batch_size,
                    verbose = 1,
                    callbacks = [callbacks])

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.show()

converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

with tf.io.gfile.GFile('model.tflite', 'wb') as f:
  f.write(tflite_model)